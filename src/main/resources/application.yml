spring:
    datasource:
        driver-class-name: org.postgresql.Driver
        url: jdbc:postgresql://localhost:5432/paint
        username: postgres
        password: postgres

    jpa:
      defer-datasource-initialization: true
      database: postgresql
      database-platform: org.hibernate.dialect.PostgreSQLDialect
      generate-ddl: false
      hibernate:
        ddl-auto: update
        naming:
          physical-strategy : org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
      show-sql: false
      properties:
        '[hibernate.format_sql]' : true
        '[hibernate.generate_statistics]' : true
        '[persistence.schema-generation.scripts.create-target]' : create.sql

    security:
      oauth2:
        client:
          registration:
            google:
              clientId: 5014057553-8gm9um6vnli3cle5rgigcdjpdrid14m9.apps.googleusercontent.com
              clientSecret: tWZKVLxaD_ARWsriiiUFYoIk
#              redirectUri: "{baseUrl}/oauth2/callback/{registrationId}"
              redirectUri: "http://localhost:8080/oauth2/callback/google"
              scope:
                - email
                - profile

# keys
rsa:
  private-key:
    classpath:certs/private.pem
  public-key:
    classpath:certs/public.pem


token:
  domain: localhost
  expiresHours: 3

cors:
  allowedOrigins: http://localhost:5173,http://localhost:8080

oauth:
  # After successfully authenticating with the OAuth2 Provider,
  # we'll be generating an auth token for the user and sending the token to the
  # redirectUri mentioned by the client in the /oauth2/authorize request.
  # We're not using cookies because they won't work well in mobile clients.
  authorizedRedirectUris:
      - http://localhost:5173/oauth2/redirect
      - myandroidapp://oauth2/redirect
      - myiosapp://oauth2/redirect


#stripe key:sk_test_51OS0YSLjRm5KgpNdyF9LnTQ2OmittinKQt4DP9MfFrIFK4gBvuW2TY4COSgCOuIEaGL5D8s7XWzfCvKTk3kP57zf00KDibU1RU